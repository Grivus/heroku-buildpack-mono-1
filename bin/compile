#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

mktmpdir() {
  dir=$(mktemp -t mono-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

# config
MONO_VERSION="2.10.8"
S3_BUCKET="bh-buildpack-mono"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2

# s3 packages
MONO_PACKAGE="https://dl.dropboxusercontent.com/s/5iraouidujl78f6/mono.tar.gz?dl=1"
#"http://${S3_BUCKET}.s3.amazonaws.com/mono-${MONO_VERSION}.tar.gz"

# vendor directories
VENDORED_MONO="$(mktmpdir mono)/mono"

# download and unpack packages
echo "-----> Fetching Mono binaries"
mkdir -p $VENDORED_MONO  && curl $MONO_PACKAGE -s -o -  | tar xzf - -C $VENDORED_MONO

echo "Vendored mono is "+ "$VENDORED_MONO"
ls "$VENDORED_MONO"
echo "---"
ls "$VENDORED_MONO/mono"
echo "---"
#$VENDORED_MONO = "$VENDORED_MONO/mono"
#ls "$VENDORED_MONO"
#echo "---"

# vendor node into the slug       
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring mono $MONO_VERSION"
mkdir -p "$BUILD_DIR/mono-build"
mkdir -p "$BUILD_DIR/mono-build/bin/"
echo "-----> Making dir end"

ls "$VENDORED_MONO"
echo "-----> cp and making dir start"
cp -r "$VENDORED_MONO/mono/bin/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/etc/"
echo "-----> cp and making dir end 1"
cp -r "$VENDORED_MONO/mono/etc/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/include/"
echo "-----> cp and making dir end 2"
cp -r "$VENDORED_MONO/mono/include/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/lib/"
echo "-----> cp and making dir end 3"
cp -r "$VENDORED_MONO/mono/lib/" "$BUILD_DIR/mono-build/"
mkdir -p "$BUILD_DIR/mono-build/share/"
echo "-----> cp and making dir end 4"
cp -r "$VENDORED_MONO/mono/share/" "$BUILD_DIR/mono-build/"
echo "-----> cp and making dir end 5"

# setting up paths for building
PATH="$BUILD_DIR/mono-build/bin:$VENDORED_MONO/bin:$PATH"
INCLUDE_PATH="$BUILD_DIR/mono-build/include"
export CPATH="$INCLUDE_PATH"     
export CPPPATH="$INCLUDE_PATH"

#build app
SLN=$(ls $BUILD_DIR/*.sln | head -1)
echo "lsing!"
ls "$BUILD_DIR/mono-build"
echo "---"
ls "$BUILD_DIR/mono-build/lib"
echo "---"
ls "$BUILD_DIR/mono-build/lib/mono"
echo "---"
ls "$BUILD_DIR/mono-build/lib/mono/xbuild"
echo "---"

#NUGET_EXECUTABLE_PATH=$BUILD_DIR/mono-build/nuget.exe
#if [ ! -f ${NUGET_EXECUTABLE_PATH} ]; then
#  curl -LSso ${NUGET_EXECUTABLE_PATH} http://nuget.org/nuget.exe
#fi

cd "$BUILD_DIR"

ls "$BUILD_DIR"

rm -rf "$BUILD_DIR/packages"

Packages="https://dl.dropboxusercontent.com/s/4bp5bujoda2h48c/packages.tar.gz?dl=1"

curl $Packages -s -o - | tar xzf - -C $BUILD_DIR

#ls
#echo "--"
#cd packages 
#ls
#echo "--"
#cd HtmlAgilityPack.1.4.9.5
#ls
#echo "--"
#cd lib
#ls
#echo "--"
#cd Net45
#ls
#echo "--"

#mkdir packages

cd "$BUILD_DIR/mono-build/bin"

#echo "cert-sync"
#./mono ../lib/mono/4.5/cert-sync.exe /etc/ssl/certs/ca-certificates.crt
echo "certmgr"
#./mono ../lib/mono/4.5/mozroots.exe --import --sync
echo | ./mono ../lib/mono/4.5/certmgr.exe -ssl https://web.telegram.org
echo "certmgr"
echo | ./mono ../lib/mono/4.5/certmgr.exe -ssl https://telegram.org


#./mono ../lib/mono/4.5/certmgr.exe -ssl https://go.microsoft.com
#./mono ../lib/mono/4.5/certmgr.exe -ssl https://nugetgallery.blob.core.windows.net
#./mono ../lib/mono/4.5/certmgr.exe -ssl https://nuget.org

#cd "$BUILD_DIR"

#mono ${NUGET_EXECUTABLE_PATH} install ./TelergramEALLOBot/packages.config -OutputDirectory ./packages/

#mono ${NUGET_EXECUTABLE_PATH} restore "$SLN"

#mono ${NUGET_EXECUTABLE_PATH} restore -NonInteractive

cd "$BUILD_DIR/mono-build/bin"

#BUILDCMD="$VENDORED_MONO/bin/xbuild $SLN"
#"$VENDORED_MONO/bin/mono $VENDORED_MONO/lib/mono/4.0/xbuild.exe $SLN"
#echo "-----> building via $BUILDCMD"
#eval $BUILDCMD

./mono "$BUILD_DIR/mono-build/lib/mono/xbuild/14.0/bin/xbuild.exe" $SLN
